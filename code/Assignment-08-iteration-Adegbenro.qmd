---
title: "Assignment 8 - Iteration"
author: "COMFORT ADEGBENRO"  
format:
  html:
    code-fold: true 
    embed-resources: true
    toc: true
    number-sections: true
    theme: cerulean
---

# Goal of this assignment  
The goal of this assignment is for you to **apply different iteration concepts** learned in class to a new data set.  

In specific, you will be asked to:  
  - create a function to automate plot creation  
  - apply this function to different parts of a dataset through the use of the map function.  

# Instructions  
  - Move this script into the `code` subfolder of your `08_iteration` project  
  - Move the **wheat_nk_balkh_rm.csv** data set into the `data` subfolder  
  - On this script, fill your name under the `title` section of the YAML  
  - On this script, you will be asked to:  
    - Import the raw soybeans data set used in the `02_wrangling` project  
    - Create a function to automate the creation of boxplots  
    - Create a map workflow to apply your function to different locations in the data set  
    
# Code  
Hereafter is where you will develop your code.  
Remember to load any necessary packages and the data.

```{r setup}
#| message: false
#| warning: false

# Loading packages
library(tidyverse)
library(janitor) 
library(knitr) 
library(gridExtra)
```

Reading data.  
```{r load dataset}
#| message: false
#| warning: false

soybean = readxl::read_excel("../data/01_soybeans.xlsx")

head(soybean, 4)
```

Get a glimpse of columns in the data.
```{r glimpse}
#| message: false
#| warning: false

glimpse(soybean)
```

Quick summary of the data per column.
```{r summary}
#| message: false
#| warning: false

summary(soybean)
```

Clean up data and add necessary columns.
```{r data wrangling}
#| message: false
#| warning: false

soybean_w = soybean %>%
  clean_names() %>% # clean names
  mutate(krate_kgha = round((k_rate_lbac*0.454/0.405),0)
               ) %>% # convert K to kg/ha
  mutate(krate_kgha = as.factor(krate_kgha),
         trt = as.factor(trt))%>% # convert Krate to a factor
  mutate(rep = case_when(plot > 100 & plot < 200 ~ 1,
                         plot > 200 & plot < 300 ~ 2,
                         plot > 300 & plot < 400 ~ 3,
                         plot > 400 ~ 4),
         rep = as.factor(rep)) %>% # add rep as a column just in case
  mutate(Tifton = tifton_k_pct,
         Midville = midville_k_pct,
         Watkinsville = watkinsville_k_pct,
         Macon = macon_k_pct) %>% # rename the location columns 
  select(rep, krate_kgha,Tifton:Macon) # select only the useful columns

head(soybean_w, 4)
```

## Q1 - Create a function  
Here, you are asked to create a function.  
The goal of this function is to create a boxplot of K leaf concentration as a function of K rates.    
Name the function `myplot`.  
The function inputs are:  
  - df: the data set containing the columns needed for plotting  
  - x: the column name inside df to be plotted on the x axis  
  - y: the column name inside df to be plotted on the y axis  

Once you create the function, make sure it works by applying it to one of the locations where K leaf concentration was collected.  

```{r plot function}
#| message: false
#| warning: false

myplot = function(df, x, y) {
  
  # extract columns x and y then store in variables
  x = df %>% 
    pull({{x}})
  y = df %>%
    pull({{y}})
  
  # function for plotting the boxplots
  plots = ggplot(data = df,
         aes(x = x,
             y = y,
             color = x)) +
    geom_boxplot(width = 0.4) +
    geom_jitter() +
    scale_color_brewer(palette = "Dark2") +
    theme_minimal() +
    theme(legend.position = "none",
          axis.line = element_line(linewidth = 0.2),
        axis.text = element_text(size= 9, 
                                 color = "black"),
        axis.ticks = element_line(linewidth = 0.3),
        axis.title = element_text(hjust = 0.5,
                                  size = 9)) +
    labs(x= "Potassium Rate (kg/ha)", 
       y= "K Leaf Concentration (%)")
  plots
}

# Test the function with the Tifton column
myplot(soybean_w, krate_kgha, Tifton)

```


## Q2 - Iterate over locations  
On the step above you created a function to create boxplot for one location (one column in your original data set).  

Now, you are asked to apply this function to each location in the data set.  
For that, use one of the functions in the `map` family from the purr package.  
When making your plots, make sure to add a title to represent which location is represented in each plot.

```{r mapping over location}
#| message: false
#| warning: false

# select the names of the columns/ location to iterate over

location = soybean_w %>%
  select(Tifton:Macon) %>%
  colnames()

# use the map() function to apply the box plot function for each location
location_plot = map(location,
                    ~myplot(df = soybean_w,
                            x = krate_kgha, 
                            y = .x) +
                      labs(title = paste(.x)) + # add location title
                      theme(plot.title = 
                              element_text(size = 9,
                                           face = "bold"))) # modify location title
```

Combine the plots for each location into one graph
```{r all plots}
#| message: false
#| warning: false


soyplot = marrangeGrob(location_plot,
                       nrow = 2,
                       ncol = 2,
                       top = NULL)
soyplot


ggsave("soyplot.png", 
       plot = soyplot,
       path = "../output/")
```

# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.  

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE` (I'll demo this in a moment).  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one (I'lld demo this in a moment).  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `Assignment-08-iteration-LASTNAME.html`.    

For ex., mine would be `Assignment-08-iteration-Bastos.html`.

Submit your work by uploading the **html** file to **eLC Assigment #8 - Iteration** by Mar 18 11:59 pm.  
  




